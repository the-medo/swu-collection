/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as TournamentsIndexImport } from './routes/tournaments/index'
import { Route as ToolsIndexImport } from './routes/tools/index'
import { Route as NotificationsIndexImport } from './routes/notifications/index'
import { Route as MetaIndexImport } from './routes/meta/index'
import { Route as MessagesIndexImport } from './routes/messages/index'
import { Route as ComparerIndexImport } from './routes/comparer/index'
import { Route as WantlistsYourImport } from './routes/wantlists/your'
import { Route as WantlistsPublicImport } from './routes/wantlists/public'
import { Route as ListsYourImport } from './routes/lists/your'
import { Route as DecksYourImport } from './routes/decks/your'
import { Route as DecksTournamentImport } from './routes/decks/tournament'
import { Route as DecksPublicImport } from './routes/decks/public'
import { Route as DecksFavoriteImport } from './routes/decks/favorite'
import { Route as CollectionsYourImport } from './routes/collections/your'
import { Route as CollectionsPublicImport } from './routes/collections/public'
import { Route as CardsSearchImport } from './routes/cards/search'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated.settings'
import { Route as AuthenticatedAdminImport } from './routes/_authenticated.admin'
import { Route as WantlistsWantlistIdIndexImport } from './routes/wantlists/$wantlistId/index'
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index'
import { Route as TournamentsPlanetaryQualifiersIndexImport } from './routes/tournaments/planetary-qualifiers/index'
import { Route as TournamentsFeaturedIndexImport } from './routes/tournaments/featured/index'
import { Route as TournamentsAllIndexImport } from './routes/tournaments/all/index'
import { Route as TournamentsTournamentIdIndexImport } from './routes/tournaments/$tournamentId/index'
import { Route as ToolsDeckFormatConverterIndexImport } from './routes/tools/deck-format-converter/index'
import { Route as ListsCardListIdIndexImport } from './routes/lists/$cardListId/index'
import { Route as DecksDeckIdIndexImport } from './routes/decks/$deckId/index'
import { Route as CollectionsCollectionIdIndexImport } from './routes/collections/$collectionId/index'
import { Route as TournamentsTournamentIdMetaImport } from './routes/tournaments/$tournamentId/meta'
import { Route as TournamentsTournamentIdMatchupsImport } from './routes/tournaments/$tournamentId/matchups'
import { Route as TournamentsTournamentIdDetailsImport } from './routes/tournaments/$tournamentId/details'
import { Route as TournamentsTournamentIdDecksImport } from './routes/tournaments/$tournamentId/decks'
import { Route as TournamentsTournamentIdCardStatsImport } from './routes/tournaments/$tournamentId/card-stats'
import { Route as DecksDeckIdEditImport } from './routes/decks/$deckId/edit'
import { Route as CardsDetailCardIdImport } from './routes/cards/detail/$cardId'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TournamentsIndexRoute = TournamentsIndexImport.update({
  id: '/tournaments/',
  path: '/tournaments/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsIndexRoute = ToolsIndexImport.update({
  id: '/tools/',
  path: '/tools/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIndexRoute = NotificationsIndexImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const MetaIndexRoute = MetaIndexImport.update({
  id: '/meta/',
  path: '/meta/',
  getParentRoute: () => rootRoute,
} as any)

const MessagesIndexRoute = MessagesIndexImport.update({
  id: '/messages/',
  path: '/messages/',
  getParentRoute: () => rootRoute,
} as any)

const ComparerIndexRoute = ComparerIndexImport.update({
  id: '/comparer/',
  path: '/comparer/',
  getParentRoute: () => rootRoute,
} as any)

const WantlistsYourRoute = WantlistsYourImport.update({
  id: '/wantlists/your',
  path: '/wantlists/your',
  getParentRoute: () => rootRoute,
} as any)

const WantlistsPublicRoute = WantlistsPublicImport.update({
  id: '/wantlists/public',
  path: '/wantlists/public',
  getParentRoute: () => rootRoute,
} as any)

const ListsYourRoute = ListsYourImport.update({
  id: '/lists/your',
  path: '/lists/your',
  getParentRoute: () => rootRoute,
} as any)

const DecksYourRoute = DecksYourImport.update({
  id: '/decks/your',
  path: '/decks/your',
  getParentRoute: () => rootRoute,
} as any)

const DecksTournamentRoute = DecksTournamentImport.update({
  id: '/decks/tournament',
  path: '/decks/tournament',
  getParentRoute: () => rootRoute,
} as any)

const DecksPublicRoute = DecksPublicImport.update({
  id: '/decks/public',
  path: '/decks/public',
  getParentRoute: () => rootRoute,
} as any)

const DecksFavoriteRoute = DecksFavoriteImport.update({
  id: '/decks/favorite',
  path: '/decks/favorite',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsYourRoute = CollectionsYourImport.update({
  id: '/collections/your',
  path: '/collections/your',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsPublicRoute = CollectionsPublicImport.update({
  id: '/collections/public',
  path: '/collections/public',
  getParentRoute: () => rootRoute,
} as any)

const CardsSearchRoute = CardsSearchImport.update({
  id: '/cards/search',
  path: '/cards/search',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAdminRoute = AuthenticatedAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const WantlistsWantlistIdIndexRoute = WantlistsWantlistIdIndexImport.update({
  id: '/wantlists/$wantlistId/',
  path: '/wantlists/$wantlistId/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const TournamentsPlanetaryQualifiersIndexRoute =
  TournamentsPlanetaryQualifiersIndexImport.update({
    id: '/tournaments/planetary-qualifiers/',
    path: '/tournaments/planetary-qualifiers/',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsFeaturedIndexRoute = TournamentsFeaturedIndexImport.update({
  id: '/tournaments/featured/',
  path: '/tournaments/featured/',
  getParentRoute: () => rootRoute,
} as any)

const TournamentsAllIndexRoute = TournamentsAllIndexImport.update({
  id: '/tournaments/all/',
  path: '/tournaments/all/',
  getParentRoute: () => rootRoute,
} as any)

const TournamentsTournamentIdIndexRoute =
  TournamentsTournamentIdIndexImport.update({
    id: '/tournaments/$tournamentId/',
    path: '/tournaments/$tournamentId/',
    getParentRoute: () => rootRoute,
  } as any)

const ToolsDeckFormatConverterIndexRoute =
  ToolsDeckFormatConverterIndexImport.update({
    id: '/tools/deck-format-converter/',
    path: '/tools/deck-format-converter/',
    getParentRoute: () => rootRoute,
  } as any)

const ListsCardListIdIndexRoute = ListsCardListIdIndexImport.update({
  id: '/lists/$cardListId/',
  path: '/lists/$cardListId/',
  getParentRoute: () => rootRoute,
} as any)

const DecksDeckIdIndexRoute = DecksDeckIdIndexImport.update({
  id: '/decks/$deckId/',
  path: '/decks/$deckId/',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsCollectionIdIndexRoute =
  CollectionsCollectionIdIndexImport.update({
    id: '/collections/$collectionId/',
    path: '/collections/$collectionId/',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsTournamentIdMetaRoute =
  TournamentsTournamentIdMetaImport.update({
    id: '/tournaments/$tournamentId/meta',
    path: '/tournaments/$tournamentId/meta',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsTournamentIdMatchupsRoute =
  TournamentsTournamentIdMatchupsImport.update({
    id: '/tournaments/$tournamentId/matchups',
    path: '/tournaments/$tournamentId/matchups',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsTournamentIdDetailsRoute =
  TournamentsTournamentIdDetailsImport.update({
    id: '/tournaments/$tournamentId/details',
    path: '/tournaments/$tournamentId/details',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsTournamentIdDecksRoute =
  TournamentsTournamentIdDecksImport.update({
    id: '/tournaments/$tournamentId/decks',
    path: '/tournaments/$tournamentId/decks',
    getParentRoute: () => rootRoute,
  } as any)

const TournamentsTournamentIdCardStatsRoute =
  TournamentsTournamentIdCardStatsImport.update({
    id: '/tournaments/$tournamentId/card-stats',
    path: '/tournaments/$tournamentId/card-stats',
    getParentRoute: () => rootRoute,
  } as any)

const DecksDeckIdEditRoute = DecksDeckIdEditImport.update({
  id: '/decks/$deckId/edit',
  path: '/decks/$deckId/edit',
  getParentRoute: () => rootRoute,
} as any)

const CardsDetailCardIdRoute = CardsDetailCardIdImport.update({
  id: '/cards/detail/$cardId',
  path: '/cards/detail/$cardId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/admin': {
      id: '/_authenticated/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedAdminImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/cards/search': {
      id: '/cards/search'
      path: '/cards/search'
      fullPath: '/cards/search'
      preLoaderRoute: typeof CardsSearchImport
      parentRoute: typeof rootRoute
    }
    '/collections/public': {
      id: '/collections/public'
      path: '/collections/public'
      fullPath: '/collections/public'
      preLoaderRoute: typeof CollectionsPublicImport
      parentRoute: typeof rootRoute
    }
    '/collections/your': {
      id: '/collections/your'
      path: '/collections/your'
      fullPath: '/collections/your'
      preLoaderRoute: typeof CollectionsYourImport
      parentRoute: typeof rootRoute
    }
    '/decks/favorite': {
      id: '/decks/favorite'
      path: '/decks/favorite'
      fullPath: '/decks/favorite'
      preLoaderRoute: typeof DecksFavoriteImport
      parentRoute: typeof rootRoute
    }
    '/decks/public': {
      id: '/decks/public'
      path: '/decks/public'
      fullPath: '/decks/public'
      preLoaderRoute: typeof DecksPublicImport
      parentRoute: typeof rootRoute
    }
    '/decks/tournament': {
      id: '/decks/tournament'
      path: '/decks/tournament'
      fullPath: '/decks/tournament'
      preLoaderRoute: typeof DecksTournamentImport
      parentRoute: typeof rootRoute
    }
    '/decks/your': {
      id: '/decks/your'
      path: '/decks/your'
      fullPath: '/decks/your'
      preLoaderRoute: typeof DecksYourImport
      parentRoute: typeof rootRoute
    }
    '/lists/your': {
      id: '/lists/your'
      path: '/lists/your'
      fullPath: '/lists/your'
      preLoaderRoute: typeof ListsYourImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/public': {
      id: '/wantlists/public'
      path: '/wantlists/public'
      fullPath: '/wantlists/public'
      preLoaderRoute: typeof WantlistsPublicImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/your': {
      id: '/wantlists/your'
      path: '/wantlists/your'
      fullPath: '/wantlists/your'
      preLoaderRoute: typeof WantlistsYourImport
      parentRoute: typeof rootRoute
    }
    '/comparer/': {
      id: '/comparer/'
      path: '/comparer'
      fullPath: '/comparer'
      preLoaderRoute: typeof ComparerIndexImport
      parentRoute: typeof rootRoute
    }
    '/messages/': {
      id: '/messages/'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof MessagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/meta/': {
      id: '/meta/'
      path: '/meta'
      fullPath: '/meta'
      preLoaderRoute: typeof MetaIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tools/': {
      id: '/tools/'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/': {
      id: '/tournaments/'
      path: '/tournaments'
      fullPath: '/tournaments'
      preLoaderRoute: typeof TournamentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/cards/detail/$cardId': {
      id: '/cards/detail/$cardId'
      path: '/cards/detail/$cardId'
      fullPath: '/cards/detail/$cardId'
      preLoaderRoute: typeof CardsDetailCardIdImport
      parentRoute: typeof rootRoute
    }
    '/decks/$deckId/edit': {
      id: '/decks/$deckId/edit'
      path: '/decks/$deckId/edit'
      fullPath: '/decks/$deckId/edit'
      preLoaderRoute: typeof DecksDeckIdEditImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/card-stats': {
      id: '/tournaments/$tournamentId/card-stats'
      path: '/tournaments/$tournamentId/card-stats'
      fullPath: '/tournaments/$tournamentId/card-stats'
      preLoaderRoute: typeof TournamentsTournamentIdCardStatsImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/decks': {
      id: '/tournaments/$tournamentId/decks'
      path: '/tournaments/$tournamentId/decks'
      fullPath: '/tournaments/$tournamentId/decks'
      preLoaderRoute: typeof TournamentsTournamentIdDecksImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/details': {
      id: '/tournaments/$tournamentId/details'
      path: '/tournaments/$tournamentId/details'
      fullPath: '/tournaments/$tournamentId/details'
      preLoaderRoute: typeof TournamentsTournamentIdDetailsImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/matchups': {
      id: '/tournaments/$tournamentId/matchups'
      path: '/tournaments/$tournamentId/matchups'
      fullPath: '/tournaments/$tournamentId/matchups'
      preLoaderRoute: typeof TournamentsTournamentIdMatchupsImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/meta': {
      id: '/tournaments/$tournamentId/meta'
      path: '/tournaments/$tournamentId/meta'
      fullPath: '/tournaments/$tournamentId/meta'
      preLoaderRoute: typeof TournamentsTournamentIdMetaImport
      parentRoute: typeof rootRoute
    }
    '/collections/$collectionId/': {
      id: '/collections/$collectionId/'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/decks/$deckId/': {
      id: '/decks/$deckId/'
      path: '/decks/$deckId'
      fullPath: '/decks/$deckId'
      preLoaderRoute: typeof DecksDeckIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/lists/$cardListId/': {
      id: '/lists/$cardListId/'
      path: '/lists/$cardListId'
      fullPath: '/lists/$cardListId'
      preLoaderRoute: typeof ListsCardListIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/tools/deck-format-converter/': {
      id: '/tools/deck-format-converter/'
      path: '/tools/deck-format-converter'
      fullPath: '/tools/deck-format-converter'
      preLoaderRoute: typeof ToolsDeckFormatConverterIndexImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/$tournamentId/': {
      id: '/tournaments/$tournamentId/'
      path: '/tournaments/$tournamentId'
      fullPath: '/tournaments/$tournamentId'
      preLoaderRoute: typeof TournamentsTournamentIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/all/': {
      id: '/tournaments/all/'
      path: '/tournaments/all'
      fullPath: '/tournaments/all'
      preLoaderRoute: typeof TournamentsAllIndexImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/featured/': {
      id: '/tournaments/featured/'
      path: '/tournaments/featured'
      fullPath: '/tournaments/featured'
      preLoaderRoute: typeof TournamentsFeaturedIndexImport
      parentRoute: typeof rootRoute
    }
    '/tournaments/planetary-qualifiers/': {
      id: '/tournaments/planetary-qualifiers/'
      path: '/tournaments/planetary-qualifiers'
      fullPath: '/tournaments/planetary-qualifiers'
      preLoaderRoute: typeof TournamentsPlanetaryQualifiersIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/$wantlistId/': {
      id: '/wantlists/$wantlistId/'
      path: '/wantlists/$wantlistId'
      fullPath: '/wantlists/$wantlistId'
      preLoaderRoute: typeof WantlistsWantlistIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedAdminRoute: typeof AuthenticatedAdminRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdminRoute: AuthenticatedAdminRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/admin': typeof AuthenticatedAdminRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/favorite': typeof DecksFavoriteRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/lists/your': typeof ListsYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/comparer': typeof ComparerIndexRoute
  '/messages': typeof MessagesIndexRoute
  '/meta': typeof MetaIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/tools': typeof ToolsIndexRoute
  '/tournaments': typeof TournamentsIndexRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/tournaments/$tournamentId/card-stats': typeof TournamentsTournamentIdCardStatsRoute
  '/tournaments/$tournamentId/decks': typeof TournamentsTournamentIdDecksRoute
  '/tournaments/$tournamentId/details': typeof TournamentsTournamentIdDetailsRoute
  '/tournaments/$tournamentId/matchups': typeof TournamentsTournamentIdMatchupsRoute
  '/tournaments/$tournamentId/meta': typeof TournamentsTournamentIdMetaRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId': typeof DecksDeckIdIndexRoute
  '/lists/$cardListId': typeof ListsCardListIdIndexRoute
  '/tools/deck-format-converter': typeof ToolsDeckFormatConverterIndexRoute
  '/tournaments/$tournamentId': typeof TournamentsTournamentIdIndexRoute
  '/tournaments/all': typeof TournamentsAllIndexRoute
  '/tournaments/featured': typeof TournamentsFeaturedIndexRoute
  '/tournaments/planetary-qualifiers': typeof TournamentsPlanetaryQualifiersIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/admin': typeof AuthenticatedAdminRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/favorite': typeof DecksFavoriteRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/lists/your': typeof ListsYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/comparer': typeof ComparerIndexRoute
  '/messages': typeof MessagesIndexRoute
  '/meta': typeof MetaIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/tools': typeof ToolsIndexRoute
  '/tournaments': typeof TournamentsIndexRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/tournaments/$tournamentId/card-stats': typeof TournamentsTournamentIdCardStatsRoute
  '/tournaments/$tournamentId/decks': typeof TournamentsTournamentIdDecksRoute
  '/tournaments/$tournamentId/details': typeof TournamentsTournamentIdDetailsRoute
  '/tournaments/$tournamentId/matchups': typeof TournamentsTournamentIdMatchupsRoute
  '/tournaments/$tournamentId/meta': typeof TournamentsTournamentIdMetaRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId': typeof DecksDeckIdIndexRoute
  '/lists/$cardListId': typeof ListsCardListIdIndexRoute
  '/tools/deck-format-converter': typeof ToolsDeckFormatConverterIndexRoute
  '/tournaments/$tournamentId': typeof TournamentsTournamentIdIndexRoute
  '/tournaments/all': typeof TournamentsAllIndexRoute
  '/tournaments/featured': typeof TournamentsFeaturedIndexRoute
  '/tournaments/planetary-qualifiers': typeof TournamentsPlanetaryQualifiersIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/_authenticated/admin': typeof AuthenticatedAdminRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/favorite': typeof DecksFavoriteRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/lists/your': typeof ListsYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/comparer/': typeof ComparerIndexRoute
  '/messages/': typeof MessagesIndexRoute
  '/meta/': typeof MetaIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
  '/tools/': typeof ToolsIndexRoute
  '/tournaments/': typeof TournamentsIndexRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/tournaments/$tournamentId/card-stats': typeof TournamentsTournamentIdCardStatsRoute
  '/tournaments/$tournamentId/decks': typeof TournamentsTournamentIdDecksRoute
  '/tournaments/$tournamentId/details': typeof TournamentsTournamentIdDetailsRoute
  '/tournaments/$tournamentId/matchups': typeof TournamentsTournamentIdMatchupsRoute
  '/tournaments/$tournamentId/meta': typeof TournamentsTournamentIdMetaRoute
  '/collections/$collectionId/': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId/': typeof DecksDeckIdIndexRoute
  '/lists/$cardListId/': typeof ListsCardListIdIndexRoute
  '/tools/deck-format-converter/': typeof ToolsDeckFormatConverterIndexRoute
  '/tournaments/$tournamentId/': typeof TournamentsTournamentIdIndexRoute
  '/tournaments/all/': typeof TournamentsAllIndexRoute
  '/tournaments/featured/': typeof TournamentsFeaturedIndexRoute
  '/tournaments/planetary-qualifiers/': typeof TournamentsPlanetaryQualifiersIndexRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId/': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/privacy'
    | '/terms'
    | '/admin'
    | '/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/favorite'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/lists/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/comparer'
    | '/messages'
    | '/meta'
    | '/notifications'
    | '/tools'
    | '/tournaments'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/tournaments/$tournamentId/card-stats'
    | '/tournaments/$tournamentId/decks'
    | '/tournaments/$tournamentId/details'
    | '/tournaments/$tournamentId/matchups'
    | '/tournaments/$tournamentId/meta'
    | '/collections/$collectionId'
    | '/decks/$deckId'
    | '/lists/$cardListId'
    | '/tools/deck-format-converter'
    | '/tournaments/$tournamentId'
    | '/tournaments/all'
    | '/tournaments/featured'
    | '/tournaments/planetary-qualifiers'
    | '/users/$userId'
    | '/wantlists/$wantlistId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/privacy'
    | '/terms'
    | '/admin'
    | '/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/favorite'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/lists/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/comparer'
    | '/messages'
    | '/meta'
    | '/notifications'
    | '/tools'
    | '/tournaments'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/tournaments/$tournamentId/card-stats'
    | '/tournaments/$tournamentId/decks'
    | '/tournaments/$tournamentId/details'
    | '/tournaments/$tournamentId/matchups'
    | '/tournaments/$tournamentId/meta'
    | '/collections/$collectionId'
    | '/decks/$deckId'
    | '/lists/$cardListId'
    | '/tools/deck-format-converter'
    | '/tournaments/$tournamentId'
    | '/tournaments/all'
    | '/tournaments/featured'
    | '/tournaments/planetary-qualifiers'
    | '/users/$userId'
    | '/wantlists/$wantlistId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/_authenticated/admin'
    | '/_authenticated/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/favorite'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/lists/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/comparer/'
    | '/messages/'
    | '/meta/'
    | '/notifications/'
    | '/tools/'
    | '/tournaments/'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/tournaments/$tournamentId/card-stats'
    | '/tournaments/$tournamentId/decks'
    | '/tournaments/$tournamentId/details'
    | '/tournaments/$tournamentId/matchups'
    | '/tournaments/$tournamentId/meta'
    | '/collections/$collectionId/'
    | '/decks/$deckId/'
    | '/lists/$cardListId/'
    | '/tools/deck-format-converter/'
    | '/tournaments/$tournamentId/'
    | '/tournaments/all/'
    | '/tournaments/featured/'
    | '/tournaments/planetary-qualifiers/'
    | '/users/$userId/'
    | '/wantlists/$wantlistId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AboutRoute: typeof AboutRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  CardsSearchRoute: typeof CardsSearchRoute
  CollectionsPublicRoute: typeof CollectionsPublicRoute
  CollectionsYourRoute: typeof CollectionsYourRoute
  DecksFavoriteRoute: typeof DecksFavoriteRoute
  DecksPublicRoute: typeof DecksPublicRoute
  DecksTournamentRoute: typeof DecksTournamentRoute
  DecksYourRoute: typeof DecksYourRoute
  ListsYourRoute: typeof ListsYourRoute
  WantlistsPublicRoute: typeof WantlistsPublicRoute
  WantlistsYourRoute: typeof WantlistsYourRoute
  ComparerIndexRoute: typeof ComparerIndexRoute
  MessagesIndexRoute: typeof MessagesIndexRoute
  MetaIndexRoute: typeof MetaIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
  ToolsIndexRoute: typeof ToolsIndexRoute
  TournamentsIndexRoute: typeof TournamentsIndexRoute
  CardsDetailCardIdRoute: typeof CardsDetailCardIdRoute
  DecksDeckIdEditRoute: typeof DecksDeckIdEditRoute
  TournamentsTournamentIdCardStatsRoute: typeof TournamentsTournamentIdCardStatsRoute
  TournamentsTournamentIdDecksRoute: typeof TournamentsTournamentIdDecksRoute
  TournamentsTournamentIdDetailsRoute: typeof TournamentsTournamentIdDetailsRoute
  TournamentsTournamentIdMatchupsRoute: typeof TournamentsTournamentIdMatchupsRoute
  TournamentsTournamentIdMetaRoute: typeof TournamentsTournamentIdMetaRoute
  CollectionsCollectionIdIndexRoute: typeof CollectionsCollectionIdIndexRoute
  DecksDeckIdIndexRoute: typeof DecksDeckIdIndexRoute
  ListsCardListIdIndexRoute: typeof ListsCardListIdIndexRoute
  ToolsDeckFormatConverterIndexRoute: typeof ToolsDeckFormatConverterIndexRoute
  TournamentsTournamentIdIndexRoute: typeof TournamentsTournamentIdIndexRoute
  TournamentsAllIndexRoute: typeof TournamentsAllIndexRoute
  TournamentsFeaturedIndexRoute: typeof TournamentsFeaturedIndexRoute
  TournamentsPlanetaryQualifiersIndexRoute: typeof TournamentsPlanetaryQualifiersIndexRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
  WantlistsWantlistIdIndexRoute: typeof WantlistsWantlistIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  CardsSearchRoute: CardsSearchRoute,
  CollectionsPublicRoute: CollectionsPublicRoute,
  CollectionsYourRoute: CollectionsYourRoute,
  DecksFavoriteRoute: DecksFavoriteRoute,
  DecksPublicRoute: DecksPublicRoute,
  DecksTournamentRoute: DecksTournamentRoute,
  DecksYourRoute: DecksYourRoute,
  ListsYourRoute: ListsYourRoute,
  WantlistsPublicRoute: WantlistsPublicRoute,
  WantlistsYourRoute: WantlistsYourRoute,
  ComparerIndexRoute: ComparerIndexRoute,
  MessagesIndexRoute: MessagesIndexRoute,
  MetaIndexRoute: MetaIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
  ToolsIndexRoute: ToolsIndexRoute,
  TournamentsIndexRoute: TournamentsIndexRoute,
  CardsDetailCardIdRoute: CardsDetailCardIdRoute,
  DecksDeckIdEditRoute: DecksDeckIdEditRoute,
  TournamentsTournamentIdCardStatsRoute: TournamentsTournamentIdCardStatsRoute,
  TournamentsTournamentIdDecksRoute: TournamentsTournamentIdDecksRoute,
  TournamentsTournamentIdDetailsRoute: TournamentsTournamentIdDetailsRoute,
  TournamentsTournamentIdMatchupsRoute: TournamentsTournamentIdMatchupsRoute,
  TournamentsTournamentIdMetaRoute: TournamentsTournamentIdMetaRoute,
  CollectionsCollectionIdIndexRoute: CollectionsCollectionIdIndexRoute,
  DecksDeckIdIndexRoute: DecksDeckIdIndexRoute,
  ListsCardListIdIndexRoute: ListsCardListIdIndexRoute,
  ToolsDeckFormatConverterIndexRoute: ToolsDeckFormatConverterIndexRoute,
  TournamentsTournamentIdIndexRoute: TournamentsTournamentIdIndexRoute,
  TournamentsAllIndexRoute: TournamentsAllIndexRoute,
  TournamentsFeaturedIndexRoute: TournamentsFeaturedIndexRoute,
  TournamentsPlanetaryQualifiersIndexRoute:
    TournamentsPlanetaryQualifiersIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
  WantlistsWantlistIdIndexRoute: WantlistsWantlistIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/about",
        "/privacy",
        "/terms",
        "/cards/search",
        "/collections/public",
        "/collections/your",
        "/decks/favorite",
        "/decks/public",
        "/decks/tournament",
        "/decks/your",
        "/lists/your",
        "/wantlists/public",
        "/wantlists/your",
        "/comparer/",
        "/messages/",
        "/meta/",
        "/notifications/",
        "/tools/",
        "/tournaments/",
        "/cards/detail/$cardId",
        "/decks/$deckId/edit",
        "/tournaments/$tournamentId/card-stats",
        "/tournaments/$tournamentId/decks",
        "/tournaments/$tournamentId/details",
        "/tournaments/$tournamentId/matchups",
        "/tournaments/$tournamentId/meta",
        "/collections/$collectionId/",
        "/decks/$deckId/",
        "/lists/$cardListId/",
        "/tools/deck-format-converter/",
        "/tournaments/$tournamentId/",
        "/tournaments/all/",
        "/tournaments/featured/",
        "/tournaments/planetary-qualifiers/",
        "/users/$userId/",
        "/wantlists/$wantlistId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/admin",
        "/_authenticated/settings"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/_authenticated/admin": {
      "filePath": "_authenticated.admin.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated.settings.tsx",
      "parent": "/_authenticated"
    },
    "/cards/search": {
      "filePath": "cards/search.tsx"
    },
    "/collections/public": {
      "filePath": "collections/public.tsx"
    },
    "/collections/your": {
      "filePath": "collections/your.tsx"
    },
    "/decks/favorite": {
      "filePath": "decks/favorite.tsx"
    },
    "/decks/public": {
      "filePath": "decks/public.tsx"
    },
    "/decks/tournament": {
      "filePath": "decks/tournament.tsx"
    },
    "/decks/your": {
      "filePath": "decks/your.tsx"
    },
    "/lists/your": {
      "filePath": "lists/your.tsx"
    },
    "/wantlists/public": {
      "filePath": "wantlists/public.tsx"
    },
    "/wantlists/your": {
      "filePath": "wantlists/your.tsx"
    },
    "/comparer/": {
      "filePath": "comparer/index.tsx"
    },
    "/messages/": {
      "filePath": "messages/index.tsx"
    },
    "/meta/": {
      "filePath": "meta/index.tsx"
    },
    "/notifications/": {
      "filePath": "notifications/index.tsx"
    },
    "/tools/": {
      "filePath": "tools/index.tsx"
    },
    "/tournaments/": {
      "filePath": "tournaments/index.tsx"
    },
    "/cards/detail/$cardId": {
      "filePath": "cards/detail/$cardId.tsx"
    },
    "/decks/$deckId/edit": {
      "filePath": "decks/$deckId/edit.tsx"
    },
    "/tournaments/$tournamentId/card-stats": {
      "filePath": "tournaments/$tournamentId/card-stats.tsx"
    },
    "/tournaments/$tournamentId/decks": {
      "filePath": "tournaments/$tournamentId/decks.tsx"
    },
    "/tournaments/$tournamentId/details": {
      "filePath": "tournaments/$tournamentId/details.tsx"
    },
    "/tournaments/$tournamentId/matchups": {
      "filePath": "tournaments/$tournamentId/matchups.tsx"
    },
    "/tournaments/$tournamentId/meta": {
      "filePath": "tournaments/$tournamentId/meta.tsx"
    },
    "/collections/$collectionId/": {
      "filePath": "collections/$collectionId/index.tsx"
    },
    "/decks/$deckId/": {
      "filePath": "decks/$deckId/index.tsx"
    },
    "/lists/$cardListId/": {
      "filePath": "lists/$cardListId/index.tsx"
    },
    "/tools/deck-format-converter/": {
      "filePath": "tools/deck-format-converter/index.tsx"
    },
    "/tournaments/$tournamentId/": {
      "filePath": "tournaments/$tournamentId/index.tsx"
    },
    "/tournaments/all/": {
      "filePath": "tournaments/all/index.tsx"
    },
    "/tournaments/featured/": {
      "filePath": "tournaments/featured/index.tsx"
    },
    "/tournaments/planetary-qualifiers/": {
      "filePath": "tournaments/planetary-qualifiers/index.tsx"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    },
    "/wantlists/$wantlistId/": {
      "filePath": "wantlists/$wantlistId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
