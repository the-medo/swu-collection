/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as AboutImport } from './routes/about'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as WantlistsYourImport } from './routes/wantlists/your'
import { Route as WantlistsPublicImport } from './routes/wantlists/public'
import { Route as DecksYourImport } from './routes/decks/your'
import { Route as DecksTournamentImport } from './routes/decks/tournament'
import { Route as DecksPublicImport } from './routes/decks/public'
import { Route as CollectionsYourImport } from './routes/collections/your'
import { Route as CollectionsPublicImport } from './routes/collections/public'
import { Route as CardsSearchImport } from './routes/cards/search'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated.settings'
import { Route as WantlistsWantlistIdIndexImport } from './routes/wantlists/$wantlistId/index'
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index'
import { Route as DecksDeckIdIndexImport } from './routes/decks/$deckId/index'
import { Route as CollectionsCollectionIdIndexImport } from './routes/collections/$collectionId/index'
import { Route as DecksDeckIdEditImport } from './routes/decks/$deckId/edit'
import { Route as CardsDetailCardIdImport } from './routes/cards/detail/$cardId'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WantlistsYourRoute = WantlistsYourImport.update({
  id: '/wantlists/your',
  path: '/wantlists/your',
  getParentRoute: () => rootRoute,
} as any)

const WantlistsPublicRoute = WantlistsPublicImport.update({
  id: '/wantlists/public',
  path: '/wantlists/public',
  getParentRoute: () => rootRoute,
} as any)

const DecksYourRoute = DecksYourImport.update({
  id: '/decks/your',
  path: '/decks/your',
  getParentRoute: () => rootRoute,
} as any)

const DecksTournamentRoute = DecksTournamentImport.update({
  id: '/decks/tournament',
  path: '/decks/tournament',
  getParentRoute: () => rootRoute,
} as any)

const DecksPublicRoute = DecksPublicImport.update({
  id: '/decks/public',
  path: '/decks/public',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsYourRoute = CollectionsYourImport.update({
  id: '/collections/your',
  path: '/collections/your',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsPublicRoute = CollectionsPublicImport.update({
  id: '/collections/public',
  path: '/collections/public',
  getParentRoute: () => rootRoute,
} as any)

const CardsSearchRoute = CardsSearchImport.update({
  id: '/cards/search',
  path: '/cards/search',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const WantlistsWantlistIdIndexRoute = WantlistsWantlistIdIndexImport.update({
  id: '/wantlists/$wantlistId/',
  path: '/wantlists/$wantlistId/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const DecksDeckIdIndexRoute = DecksDeckIdIndexImport.update({
  id: '/decks/$deckId/',
  path: '/decks/$deckId/',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsCollectionIdIndexRoute =
  CollectionsCollectionIdIndexImport.update({
    id: '/collections/$collectionId/',
    path: '/collections/$collectionId/',
    getParentRoute: () => rootRoute,
  } as any)

const DecksDeckIdEditRoute = DecksDeckIdEditImport.update({
  id: '/decks/$deckId/edit',
  path: '/decks/$deckId/edit',
  getParentRoute: () => rootRoute,
} as any)

const CardsDetailCardIdRoute = CardsDetailCardIdImport.update({
  id: '/cards/detail/$cardId',
  path: '/cards/detail/$cardId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/cards/search': {
      id: '/cards/search'
      path: '/cards/search'
      fullPath: '/cards/search'
      preLoaderRoute: typeof CardsSearchImport
      parentRoute: typeof rootRoute
    }
    '/collections/public': {
      id: '/collections/public'
      path: '/collections/public'
      fullPath: '/collections/public'
      preLoaderRoute: typeof CollectionsPublicImport
      parentRoute: typeof rootRoute
    }
    '/collections/your': {
      id: '/collections/your'
      path: '/collections/your'
      fullPath: '/collections/your'
      preLoaderRoute: typeof CollectionsYourImport
      parentRoute: typeof rootRoute
    }
    '/decks/public': {
      id: '/decks/public'
      path: '/decks/public'
      fullPath: '/decks/public'
      preLoaderRoute: typeof DecksPublicImport
      parentRoute: typeof rootRoute
    }
    '/decks/tournament': {
      id: '/decks/tournament'
      path: '/decks/tournament'
      fullPath: '/decks/tournament'
      preLoaderRoute: typeof DecksTournamentImport
      parentRoute: typeof rootRoute
    }
    '/decks/your': {
      id: '/decks/your'
      path: '/decks/your'
      fullPath: '/decks/your'
      preLoaderRoute: typeof DecksYourImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/public': {
      id: '/wantlists/public'
      path: '/wantlists/public'
      fullPath: '/wantlists/public'
      preLoaderRoute: typeof WantlistsPublicImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/your': {
      id: '/wantlists/your'
      path: '/wantlists/your'
      fullPath: '/wantlists/your'
      preLoaderRoute: typeof WantlistsYourImport
      parentRoute: typeof rootRoute
    }
    '/cards/detail/$cardId': {
      id: '/cards/detail/$cardId'
      path: '/cards/detail/$cardId'
      fullPath: '/cards/detail/$cardId'
      preLoaderRoute: typeof CardsDetailCardIdImport
      parentRoute: typeof rootRoute
    }
    '/decks/$deckId/edit': {
      id: '/decks/$deckId/edit'
      path: '/decks/$deckId/edit'
      fullPath: '/decks/$deckId/edit'
      preLoaderRoute: typeof DecksDeckIdEditImport
      parentRoute: typeof rootRoute
    }
    '/collections/$collectionId/': {
      id: '/collections/$collectionId/'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/decks/$deckId/': {
      id: '/decks/$deckId/'
      path: '/decks/$deckId'
      fullPath: '/decks/$deckId'
      preLoaderRoute: typeof DecksDeckIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/wantlists/$wantlistId/': {
      id: '/wantlists/$wantlistId/'
      path: '/wantlists/$wantlistId'
      fullPath: '/wantlists/$wantlistId'
      preLoaderRoute: typeof WantlistsWantlistIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId': typeof DecksDeckIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId': typeof DecksDeckIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/about': typeof AboutRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/cards/search': typeof CardsSearchRoute
  '/collections/public': typeof CollectionsPublicRoute
  '/collections/your': typeof CollectionsYourRoute
  '/decks/public': typeof DecksPublicRoute
  '/decks/tournament': typeof DecksTournamentRoute
  '/decks/your': typeof DecksYourRoute
  '/wantlists/public': typeof WantlistsPublicRoute
  '/wantlists/your': typeof WantlistsYourRoute
  '/cards/detail/$cardId': typeof CardsDetailCardIdRoute
  '/decks/$deckId/edit': typeof DecksDeckIdEditRoute
  '/collections/$collectionId/': typeof CollectionsCollectionIdIndexRoute
  '/decks/$deckId/': typeof DecksDeckIdIndexRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
  '/wantlists/$wantlistId/': typeof WantlistsWantlistIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/privacy'
    | '/terms'
    | '/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/collections/$collectionId'
    | '/decks/$deckId'
    | '/users/$userId'
    | '/wantlists/$wantlistId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/privacy'
    | '/terms'
    | '/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/collections/$collectionId'
    | '/decks/$deckId'
    | '/users/$userId'
    | '/wantlists/$wantlistId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/about'
    | '/privacy'
    | '/terms'
    | '/_authenticated/settings'
    | '/cards/search'
    | '/collections/public'
    | '/collections/your'
    | '/decks/public'
    | '/decks/tournament'
    | '/decks/your'
    | '/wantlists/public'
    | '/wantlists/your'
    | '/cards/detail/$cardId'
    | '/decks/$deckId/edit'
    | '/collections/$collectionId/'
    | '/decks/$deckId/'
    | '/users/$userId/'
    | '/wantlists/$wantlistId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AboutRoute: typeof AboutRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  CardsSearchRoute: typeof CardsSearchRoute
  CollectionsPublicRoute: typeof CollectionsPublicRoute
  CollectionsYourRoute: typeof CollectionsYourRoute
  DecksPublicRoute: typeof DecksPublicRoute
  DecksTournamentRoute: typeof DecksTournamentRoute
  DecksYourRoute: typeof DecksYourRoute
  WantlistsPublicRoute: typeof WantlistsPublicRoute
  WantlistsYourRoute: typeof WantlistsYourRoute
  CardsDetailCardIdRoute: typeof CardsDetailCardIdRoute
  DecksDeckIdEditRoute: typeof DecksDeckIdEditRoute
  CollectionsCollectionIdIndexRoute: typeof CollectionsCollectionIdIndexRoute
  DecksDeckIdIndexRoute: typeof DecksDeckIdIndexRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
  WantlistsWantlistIdIndexRoute: typeof WantlistsWantlistIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  CardsSearchRoute: CardsSearchRoute,
  CollectionsPublicRoute: CollectionsPublicRoute,
  CollectionsYourRoute: CollectionsYourRoute,
  DecksPublicRoute: DecksPublicRoute,
  DecksTournamentRoute: DecksTournamentRoute,
  DecksYourRoute: DecksYourRoute,
  WantlistsPublicRoute: WantlistsPublicRoute,
  WantlistsYourRoute: WantlistsYourRoute,
  CardsDetailCardIdRoute: CardsDetailCardIdRoute,
  DecksDeckIdEditRoute: DecksDeckIdEditRoute,
  CollectionsCollectionIdIndexRoute: CollectionsCollectionIdIndexRoute,
  DecksDeckIdIndexRoute: DecksDeckIdIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
  WantlistsWantlistIdIndexRoute: WantlistsWantlistIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/about",
        "/privacy",
        "/terms",
        "/cards/search",
        "/collections/public",
        "/collections/your",
        "/decks/public",
        "/decks/tournament",
        "/decks/your",
        "/wantlists/public",
        "/wantlists/your",
        "/cards/detail/$cardId",
        "/decks/$deckId/edit",
        "/collections/$collectionId/",
        "/decks/$deckId/",
        "/users/$userId/",
        "/wantlists/$wantlistId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/settings"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated.settings.tsx",
      "parent": "/_authenticated"
    },
    "/cards/search": {
      "filePath": "cards/search.tsx"
    },
    "/collections/public": {
      "filePath": "collections/public.tsx"
    },
    "/collections/your": {
      "filePath": "collections/your.tsx"
    },
    "/decks/public": {
      "filePath": "decks/public.tsx"
    },
    "/decks/tournament": {
      "filePath": "decks/tournament.tsx"
    },
    "/decks/your": {
      "filePath": "decks/your.tsx"
    },
    "/wantlists/public": {
      "filePath": "wantlists/public.tsx"
    },
    "/wantlists/your": {
      "filePath": "wantlists/your.tsx"
    },
    "/cards/detail/$cardId": {
      "filePath": "cards/detail/$cardId.tsx"
    },
    "/decks/$deckId/edit": {
      "filePath": "decks/$deckId/edit.tsx"
    },
    "/collections/$collectionId/": {
      "filePath": "collections/$collectionId/index.tsx"
    },
    "/decks/$deckId/": {
      "filePath": "decks/$deckId/index.tsx"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    },
    "/wantlists/$wantlistId/": {
      "filePath": "wantlists/$wantlistId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
